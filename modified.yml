- name: Wait for deployment to complete
  id: wait_deployment
  run: |
    set -x   # Enable debugging output
    # Retrieve the first deployment ID (grab the first line if there are multiple)
    deployment_id=$(aws deploy list-deployments --application-name ${{ env.PRODUCT_NAME }}-insurance-app-${{env.TARGET_ENV}} --deployment-group-name ${{ env.PRODUCT_NAME }}-insurance-${{env.TARGET_ENV}} --query 'deployments[0]' --output text --region ${{ env.AWS_REGION }})

    # Clean up the deployment_id by removing newlines and spaces (if any)
    deployment_id=$(echo "$deployment_id" | tr -d '\n' | tr -d ' ')

    # Ensure deployment_id is not empty
    if [[ -z "$deployment_id" || "$deployment_id" == "None" ]]; then
        echo "Error: No deployment ID found."
        exit 1
    fi

    # Now proceed with the deployment status check
    while true; do
        STATUS=$(aws deploy get-deployment --deployment-id $deployment_id --query "deploymentInfo.status" --output text --region ${{ env.AWS_REGION }})
        echo "Current status: $STATUS"

        if [[ "$STATUS" == "Succeeded" ]]; then
            echo "Deployment Succeeded!"
            exit 0
        elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
            ERROR_MESSAGE=$(aws deploy get-deployment --deployment-id $deployment_id --query "deploymentInfo.errorInformation" --output json)
            echo "Deployment Failed! Error details: $ERROR_MESSAGE"

            echo "Fetching lifecycle event failure details..."
            INSTANCE_IDS=$(aws deploy list-deployment-instances --deployment-id $deployment_id --query "instancesList[]" --output text)
            
            for INSTANCE_ID in $INSTANCE_IDS; do
                echo "Checking instance: $INSTANCE_ID"
                
                LIFECYCLE_EVENTS=$(aws deploy get-deployment-instance \
                    --deployment-id $deployment_id \
                    --instance-id $INSTANCE_ID \
                    --query "instanceSummary.lifecycleEvents" \
                    --output json)
                
                echo "Lifecycle events for instance $INSTANCE_ID: $LIFECYCLE_EVENTS"
                
                # Check if any lifecycle event failed and print the error messages
                FAILED_EVENTS=$(aws deploy get-deployment-instance \
                    --deployment-id $deployment_id \
                    --instance-id $INSTANCE_ID \
                    --query "instanceSummary.lifecycleEvents[?status=='Failed']" \
                    --output json)

                if [[ ! -z "$FAILED_EVENTS" ]]; then
                    echo "Failed events for instance $INSTANCE_ID: $FAILED_EVENTS"
                    for EVENT in $(echo "$FAILED_EVENTS" | jq -r '.[] | @base64'); do
                        _jq() {
                            echo "${EVENT}" | base64 --decode | jq -r "${1}"
                        }

                        EVENT_NAME=$(_jq '.lifecycleEventName')
                        ERROR_MESSAGE=$(_jq '.diagnostics.errorMessage')
                        SCRIPT_NAME=$(_jq '.diagnostics.scriptName')
                        LOG_TAIL=$(_jq '.diagnostics.logTail')

                        echo "Event: $EVENT_NAME"
                        echo "Script: $SCRIPT_NAME"
                        echo "Error: $ERROR_MESSAGE"
                        echo "Log tail: $LOG_TAIL"
                    done
                else
                    echo "No failed lifecycle events for instance $INSTANCE_ID"
                fi
            done
            exit 1
        fi
        
        echo "Waiting for deployment to complete..."
        sleep 20
    done
